package net.vrakin;

import java.math.BigInteger;
import java.util.Random;

public class Task02 {

    // –û–±—á–∏—Å–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —à–ª—è—Ö—ñ–≤ (–±—ñ–Ω–æ–º—ñ–∞–ª—å–Ω–∏–π –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç)
    public static BigInteger binomialCoefficient(int n, int k) {
        BigInteger result = BigInteger.ONE;
        for (int i = 0; i < k; i++) {
            result = result.multiply(BigInteger.valueOf(n - i))
                    .divide(BigInteger.valueOf(i + 1));
        }
        return result;
    }

    public static BigInteger countPaths(int n, int m) {
        return binomialCoefficient(n + m, m);
    }

    // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–∞–≥–∞ –º–∞—Ä—à—Ä—É—Ç—É (–¥–∏–Ω–∞–º—ñ—á–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è)
    public static int findMinPath(int[][] grid, int n, int m) {
        int[][] dp = new int[n][m];
        dp[0][0] = grid[0][0];

        // –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥–∫–∞
        for (int j = 1; j < m; j++) {
            dp[0][j] = dp[0][j - 1] + grid[0][j];
        }

        // –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø–µ—Ä—à–æ–≥–æ —Å—Ç–æ–≤–ø—Ü—è
        for (int i = 1; i < n; i++) {
            dp[i][0] = dp[i - 1][0] + grid[i][0];
        }

        // –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ä–µ—à—Ç–∏ —Ç–∞–±–ª–∏—Ü—ñ
        for (int i = 1; i < n; i++) {
            for (int j = 1; j < m; j++) {
                dp[i][j] = Math.min(dp[i - 1][j], Math.min(dp[i][j - 1], dp[i - 1][j - 1])) + grid[i][j];
            }
        }

        return dp[n - 1][m - 1]; // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–∞–≥–∞ –º–∞—Ä—à—Ä—É—Ç—É
    }

    public static void main(String[] args) {
        int[][] testCases = {
                {3, 3}, {5, 5}, {10, 10}, {10, 20},
                {20, 10}, {20, 20}, {50, 50}, {50, 100},
                {100, 50}, {100, 100}
        };

        Random rand = new Random();

        System.out.println("üîπ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –∑–∞–¥–∞—á—ñ 2 (–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç—ñ–≤)");
        for (int[] test : testCases) {
            int n = test[0], m = test[1];
            long start = System.nanoTime();
            BigInteger result = countPaths(n, m);
            long end = System.nanoTime();
            double timeMs = (end - start) / 1_000_000.0;

            System.out.println("–†–æ–∑–º—ñ—Ä –ø–æ–ª—è: " + n + "x" + m);
            System.out.println("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —à–ª—è—Ö—ñ–≤: " + result);
            System.out.println("–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: " + timeMs + " –º—Å\n");
        }

        System.out.println("\nüîπ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –∑–∞–¥–∞—á—ñ 3 (–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–∞–≥–∞ –º–∞—Ä—à—Ä—É—Ç—É)");
        for (int[] test : testCases) {
            int n = test[0], m = test[1];
            int[][] grid = new int[n][m];

            // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö —á–∏—Å–µ–ª (1-100)
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < m; j++) {
                    grid[i][j] = rand.nextInt(100) + 1;
                }
            }

            long start = System.nanoTime();
            int result = findMinPath(grid, n, m);
            long end = System.nanoTime();
            double timeMs = (end - start) / 1_000_000.0;

            System.out.println("–†–æ–∑–º—ñ—Ä –ø–æ–ª—è: " + n + "x" + m);
            System.out.println("–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–∞–≥–∞ –º–∞—Ä—à—Ä—É—Ç—É: " + result);
            System.out.println("–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: " + timeMs + " –º—Å\n");
        }
    }
}
